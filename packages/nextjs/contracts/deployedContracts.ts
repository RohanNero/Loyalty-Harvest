/**
 * This file is autogenerated by Scaffold-ETH.
 * You should not edit it manually or your changes might be overwritten.
 */
import { GenericContractsDeclaration } from "~~/utils/scaffold-eth/contract";

const deployedContracts = {
  31337: {
    Claim: {
      address: "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
      abi: [
        {
          inputs: [],
          name: "Claim__AlreadyClaimed",
          type: "error",
        },
        {
          inputs: [],
          name: "Claim__InvalidCaller",
          type: "error",
        },
        {
          inputs: [],
          name: "Claim__InvalidProof",
          type: "error",
        },
        {
          inputs: [],
          name: "Claim__InvalidSigner",
          type: "error",
        },
        {
          inputs: [],
          name: "Claim__MustProvideRootIfContestIsOver",
          type: "error",
        },
        {
          inputs: [],
          name: "Claim__MustSendRewardAmount",
          type: "error",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "current",
              type: "uint256",
            },
            {
              internalType: "uint256",
              name: "end",
              type: "uint256",
            },
          ],
          name: "Claim__RewardPeriodHasntEnded",
          type: "error",
        },
        {
          inputs: [],
          name: "Claim__RewardTransferFailed",
          type: "error",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "x",
              type: "uint256",
            },
            {
              internalType: "uint256",
              name: "y",
              type: "uint256",
            },
          ],
          name: "PRBMath_MulDiv18_Overflow",
          type: "error",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "x",
              type: "uint256",
            },
            {
              internalType: "uint256",
              name: "y",
              type: "uint256",
            },
            {
              internalType: "uint256",
              name: "denominator",
              type: "uint256",
            },
          ],
          name: "PRBMath_MulDiv_Overflow",
          type: "error",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "x",
              type: "uint256",
            },
          ],
          name: "PRBMath_UD60x18_Convert_Overflow",
          type: "error",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "uint256",
              name: "portion",
              type: "uint256",
            },
          ],
          name: "Claimed",
          type: "event",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "uint256",
              name: "eventId",
              type: "uint256",
            },
          ],
          name: "EventCreated",
          type: "event",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "uint256",
              name: "eventId",
              type: "uint256",
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "totalHeld",
              type: "uint256",
            },
            {
              indexed: false,
              internalType: "bytes32",
              name: "root",
              type: "bytes32",
            },
          ],
          name: "EventUpdated",
          type: "event",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "eventId",
              type: "uint256",
            },
            {
              internalType: "uint256",
              name: "heldUntil",
              type: "uint256",
            },
          ],
          name: "_calculateReward",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "bytes32[]",
              name: "proof",
              type: "bytes32[]",
            },
            {
              components: [
                {
                  internalType: "address",
                  name: "holder",
                  type: "address",
                },
                {
                  internalType: "address",
                  name: "to",
                  type: "address",
                },
                {
                  internalType: "uint256",
                  name: "tokenId",
                  type: "uint256",
                },
                {
                  internalType: "uint256",
                  name: "eventId",
                  type: "uint256",
                },
                {
                  internalType: "uint256",
                  name: "heldUntil",
                  type: "uint256",
                },
              ],
              internalType: "struct Claim.ClaimInfo",
              name: "info",
              type: "tuple",
            },
          ],
          name: "claim",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "eventId",
              type: "uint256",
            },
            {
              internalType: "uint256",
              name: "tokenId",
              type: "uint256",
            },
          ],
          name: "claimMap",
          outputs: [
            {
              internalType: "bool",
              name: "hasClaimed",
              type: "bool",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "bytes32[]",
              name: "proof",
              type: "bytes32[]",
            },
            {
              internalType: "bytes",
              name: "signature",
              type: "bytes",
            },
            {
              components: [
                {
                  internalType: "address",
                  name: "holder",
                  type: "address",
                },
                {
                  internalType: "address",
                  name: "to",
                  type: "address",
                },
                {
                  internalType: "uint256",
                  name: "tokenId",
                  type: "uint256",
                },
                {
                  internalType: "uint256",
                  name: "eventId",
                  type: "uint256",
                },
                {
                  internalType: "uint256",
                  name: "heldUntil",
                  type: "uint256",
                },
              ],
              internalType: "struct Claim.ClaimInfo",
              name: "info",
              type: "tuple",
            },
          ],
          name: "claimWithSignature",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "_nftContract",
              type: "address",
            },
            {
              internalType: "address",
              name: "_rewardToken",
              type: "address",
            },
            {
              internalType: "address",
              name: "_creator",
              type: "address",
            },
            {
              internalType: "bytes32",
              name: "_root",
              type: "bytes32",
            },
            {
              internalType: "uint256",
              name: "_blockStart",
              type: "uint256",
            },
            {
              internalType: "uint256",
              name: "_blockEnd",
              type: "uint256",
            },
            {
              internalType: "uint256",
              name: "_rewardAmount",
              type: "uint256",
            },
            {
              internalType: "uint256",
              name: "_nfts",
              type: "uint256",
            },
            {
              internalType: "uint256",
              name: "_totalHeld",
              type: "uint256",
            },
          ],
          name: "createRewardEvent",
          outputs: [
            {
              internalType: "uint256",
              name: "eventId",
              type: "uint256",
            },
          ],
          stateMutability: "payable",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          name: "eventMap",
          outputs: [
            {
              internalType: "address",
              name: "nftContract",
              type: "address",
            },
            {
              internalType: "address",
              name: "rewardToken",
              type: "address",
            },
            {
              internalType: "address",
              name: "creator",
              type: "address",
            },
            {
              internalType: "bytes32",
              name: "merkleRoot",
              type: "bytes32",
            },
            {
              internalType: "uint256",
              name: "startBlock",
              type: "uint256",
            },
            {
              internalType: "uint256",
              name: "endBlock",
              type: "uint256",
            },
            {
              internalType: "uint256",
              name: "rewardAmount",
              type: "uint256",
            },
            {
              internalType: "uint256",
              name: "nfts",
              type: "uint256",
            },
            {
              internalType: "uint256",
              name: "totalHeld",
              type: "uint256",
            },
            {
              internalType: "uint256",
              name: "eventId",
              type: "uint256",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "_eventId",
              type: "uint256",
            },
            {
              internalType: "uint256",
              name: "_totalHeld",
              type: "uint256",
            },
            {
              internalType: "bytes32",
              name: "_root",
              type: "bytes32",
            },
          ],
          name: "updateEvent",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [],
          name: "viewEthBalance",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "eventId",
              type: "uint256",
            },
          ],
          name: "viewEvent",
          outputs: [
            {
              components: [
                {
                  internalType: "address",
                  name: "nftContract",
                  type: "address",
                },
                {
                  internalType: "address",
                  name: "rewardToken",
                  type: "address",
                },
                {
                  internalType: "address",
                  name: "creator",
                  type: "address",
                },
                {
                  internalType: "bytes32",
                  name: "merkleRoot",
                  type: "bytes32",
                },
                {
                  internalType: "uint256",
                  name: "startBlock",
                  type: "uint256",
                },
                {
                  internalType: "uint256",
                  name: "endBlock",
                  type: "uint256",
                },
                {
                  internalType: "uint256",
                  name: "rewardAmount",
                  type: "uint256",
                },
                {
                  internalType: "uint256",
                  name: "nfts",
                  type: "uint256",
                },
                {
                  internalType: "uint256",
                  name: "totalHeld",
                  type: "uint256",
                },
                {
                  internalType: "uint256",
                  name: "eventId",
                  type: "uint256",
                },
              ],
              internalType: "struct Claim.RewardEvent",
              name: "",
              type: "tuple",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [],
          name: "viewEventMapLength",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "_eventId",
              type: "uint256",
            },
          ],
          name: "viewRewardPeriodDuration",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
      ],
    },
    NFT: {
      address: "0x5FbDB2315678afecb367f032d93F642f64180aa3",
      abi: [
        {
          inputs: [
            {
              internalType: "string",
              name: "name",
              type: "string",
            },
            {
              internalType: "string",
              name: "symbol",
              type: "string",
            },
          ],
          stateMutability: "nonpayable",
          type: "constructor",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "owner",
              type: "address",
            },
            {
              indexed: true,
              internalType: "address",
              name: "approved",
              type: "address",
            },
            {
              indexed: true,
              internalType: "uint256",
              name: "tokenId",
              type: "uint256",
            },
          ],
          name: "Approval",
          type: "event",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "owner",
              type: "address",
            },
            {
              indexed: true,
              internalType: "address",
              name: "operator",
              type: "address",
            },
            {
              indexed: false,
              internalType: "bool",
              name: "approved",
              type: "bool",
            },
          ],
          name: "ApprovalForAll",
          type: "event",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "from",
              type: "address",
            },
            {
              indexed: true,
              internalType: "address",
              name: "to",
              type: "address",
            },
            {
              indexed: true,
              internalType: "uint256",
              name: "tokenId",
              type: "uint256",
            },
          ],
          name: "Transfer",
          type: "event",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address",
            },
            {
              internalType: "uint256",
              name: "tokenId",
              type: "uint256",
            },
          ],
          name: "approve",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "owner",
              type: "address",
            },
          ],
          name: "balanceOf",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "tokenId",
              type: "uint256",
            },
          ],
          name: "getApproved",
          outputs: [
            {
              internalType: "address",
              name: "",
              type: "address",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "owner",
              type: "address",
            },
            {
              internalType: "address",
              name: "operator",
              type: "address",
            },
          ],
          name: "isApprovedForAll",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [],
          name: "name",
          outputs: [
            {
              internalType: "string",
              name: "",
              type: "string",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "tokenId",
              type: "uint256",
            },
          ],
          name: "ownerOf",
          outputs: [
            {
              internalType: "address",
              name: "",
              type: "address",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "from",
              type: "address",
            },
            {
              internalType: "address",
              name: "to",
              type: "address",
            },
            {
              internalType: "uint256",
              name: "tokenId",
              type: "uint256",
            },
          ],
          name: "safeTransferFrom",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "from",
              type: "address",
            },
            {
              internalType: "address",
              name: "to",
              type: "address",
            },
            {
              internalType: "uint256",
              name: "tokenId",
              type: "uint256",
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes",
            },
          ],
          name: "safeTransferFrom",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "operator",
              type: "address",
            },
            {
              internalType: "bool",
              name: "approved",
              type: "bool",
            },
          ],
          name: "setApprovalForAll",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "bytes4",
              name: "interfaceId",
              type: "bytes4",
            },
          ],
          name: "supportsInterface",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [],
          name: "symbol",
          outputs: [
            {
              internalType: "string",
              name: "",
              type: "string",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "tokenId",
              type: "uint256",
            },
          ],
          name: "tokenURI",
          outputs: [
            {
              internalType: "string",
              name: "",
              type: "string",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "from",
              type: "address",
            },
            {
              internalType: "address",
              name: "to",
              type: "address",
            },
            {
              internalType: "uint256",
              name: "tokenId",
              type: "uint256",
            },
          ],
          name: "transferFrom",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
      ],
    },
  },
} as const;

export default deployedContracts satisfies GenericContractsDeclaration;
